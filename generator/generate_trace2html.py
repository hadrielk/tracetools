#!/usr/bin/env python3

# Copyright 2022 Hadriel Kaplan
# See LICENSE file for MIT license.

"""Generates the trace2html script

Usage: generate_trace2html <path/to/catapult>

The trace2html program is generated by this script, using an HTML file that
itself was generated by the trace2html.py program in Google's catapult library.

See: https://chromium.googlesource.com/catapult

You can clone that repo and then invoke this script, which will then:
    1. Generate the HTML file via catapult using a dummy trace file.
    2. Read in the generated HTML file and break it into 3 sections:
        * The head and meta tags up to the `<title>` tag.
        * Everything between the closing `</title>` tag and `<script id="viewer-data" ...>` tags.
        * Everything after the closing `</script>` tag.
    3. The first and last sections are short and will be written base-64
       encoded but not gzip'ed, into the trace2html template's spots for
       them, as python strings.
    4. The middle section is huge, and will be gzip'ed and base64-encoded
       into another python string location in the trace2html template.
    5. The filled-out trace2html template will then be written as a new
       trace2html output file.

The generated HTML file is not deleted, but should not be checked into this
repo. It's only left around to help troubleshoot.
"""

from __future__ import print_function
import base64
import gzip
import io
import json
import os
import sys
from collections import namedtuple
from pathlib import Path



class TempFiles:
    trace = "dummy.json"
    html = "generated.html"


Sections = namedtuple("Sections", ["first", "second", "third"])


def get_abs_generator_dir():
    return Path(__file__).parent.resolve(strict=True)

def abs_filename(name):
    return str(get_abs_generator_dir() / name)


def create_dummy_trace():
    with open(TempFiles.trace, "w") as f:
        json.dump([], f)


def generate_html(catapult_path):
    sys.path.append(os.path.join(catapult_path, "tracing"))
    from tracing_build import trace2html
    with open(TempFiles.html, "w") as f:
        trace2html.WriteHTMLForTracesToFile([TempFiles.trace], f)


def get_generated_sections():
    whole = Path(TempFiles.html).read_bytes()
    # first section
    found = whole.find(b"<title>")
    assert found > 0
    found += len(b"<title>")
    first = whole[0:found]
    # second section
    found = whole.find(b"</title>", found)
    assert found > 0
    trailer = b"<script id=\"viewer-data\" type=\"text/plain\">"
    rfound = whole.rfind(trailer)
    assert rfound > 0
    rfound += len(trailer)
    second = whole[found:rfound]
    # third section
    rfound = whole.rfind(b"</script>")
    assert rfound > 0
    third = whole[rfound:]
    return Sections(first, second, third)


def get_sections_as_bytestrings():
    sections = get_generated_sections()
    first64 = base64.b64encode(sections.first)
    third64 = base64.b64encode(sections.third)
    backing = io.BytesIO()
    with gzip.GzipFile(fileobj=backing, mode='wb', mtime=0) as f:
        f.write(sections.second)
    second64 = base64.b64encode(backing.getvalue())
    return Sections(first64, second64, third64)


def get_generated_pyscript(sections):
    template = Path(abs_filename("trace2html.in")).read_bytes()
    # replace first and third before second, since second is huge
    template = template.replace(b"@FIRST_SECTION_BYTESTRING@", sections.first)
    template = template.replace(b"@THIRD_SECTION_BYTESTRING@", sections.third)
    return template.replace(b"@SECOND_SECTION_BYTESTRING@", sections.second)


# from https://stackoverflow.com/a/30463972
def make_executable(path):
    mode = path.stat().st_mode
    mode |= (mode & 0o444) >> 2    # copy R bits to X
    path.chmod(mode)


def main(argv):
    if len(argv) != 1:
        print(__doc__)
        print("ERROR: need the path to the catapult repo directory")
        return 1

    if any(x in argv[0] for x in ["-h", "--help", "-v", "--version"]):
        print(__doc__)
        return 2

    create_dummy_trace()
    generate_html(argv[0])
    sections = get_sections_as_bytestrings()
    pyscript = get_generated_pyscript(sections)

    path = Path("trace2html")
    path.write_bytes(pyscript)
    make_executable(path)

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
