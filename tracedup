#!/usr/bin/env python3

# Copyright 2022 Hadriel Kaplan
# See LICENSE file for MIT license.

"""tracedup [--from-pid=<pid>] [--to-pid=<pid>] [--field=<field>] [--invert] <pattern> [<filepath>]

Reads in a trace file or stdin, and duplicates entries of a given from-pid
number matching the given regex pattern for the given field, and giving them
the given to-pid number.

The trace file format can be either Array or Object-based JSON.

If no `--from-pid` is given, defaults to copying from pid 0. If no `--to-pid`
is given, it gives them the highest found pid + 1.

By default, the given pattern is applied to the 'name' field of each Array
entry, or of the Array in the 'traceEvents' and 'samples' Object key fields if
it's an Object-based JSON format.

To choose a different key field, use the `--field=<field>` option.

If the chosen field's type is not a string, it will be converted to a string
before applying the regex pattern.

The `--invert` option duplicates those that do NOT match the pattern.

To apply different patterns to different fields, simply pipe multiple
tracedup commands together, specifying the same pids.

The regex pattern uses Python's engine, so you can have a case-insensitive
match by preceeding the pattern with '(?i)', for example. Also, this script
uses `re.search()`, so the pattern can match anywhere in the input string;
use anchors to constrain it.

Example usage:
    tracedup '\\b(Staging|thirdparty)\\b' intrace.json > outtrace.json
Or for stdin:
    cat intrace.json | tracedup '\\b(Staging|thirdparty)\\b' > outtrace.json

Example only copying entries of longer duration than 9,999,999 microseconds:
    tracedup --field=dur '^[1-9][0-9]{7,}$' intrace.json > outtrace.json

Example only copying entries with names ending in .a, .o, .c, .cpp, etc.:
    tracedup '\\.(?:[aoc]|cc|cpp|cxx)\\b' intrace.json > outtrace.json
"""


from __future__ import print_function
import json
import optparse
import re
import sys


ENTRY_KEYS = ["traceEvents", "samples"]


def dup_entries(entries, field, pattern, from_pid, to_pid, invert):
    match_re = re.compile(pattern)
    match = lambda x: match_re.search(x) is not None
    if invert:
        match = lambda x: match_re.search(x) is None
    output = []
    for entry in entries:
        output.append(entry)
        if (
            "pid" in entry
            and entry["pid"] == from_pid
            and field in entry
            and match(str(entry[field]))
        ):
            clone = entry.copy()
            clone["pid"] = to_pid
            output.append(clone)
    return output


def dup_json(trace, field, pattern, from_pid, to_pid, invert, which=ENTRY_KEYS):
    if isinstance(trace, list):
        return dup_entries(trace, field, pattern, from_pid, to_pid, invert)
    if isinstance(trace, dict):
        for key in which:
            if key in trace:
                trace[key] = dup_entries(
                    trace[key], field, pattern, from_pid, to_pid, invert
                )
    return trace


def find_highest_pid_in(entries):
    return max((entry.get("pid", 0) for entry in entries), default=0)


def find_highest_pid(trace, which=ENTRY_KEYS):
    if isinstance(trace, list):
        return max(find_highest_pid_in(trace), 0)
    if isinstance(trace, dict):
        pid = 0
        for key in which:
            if key in trace:
                pid = max(find_highest_pid_in(trace[key]), pid)
    return pid


def get_parser():
    parser = optparse.OptionParser(__doc__)
    parser.add_option(
        "-f",
        "--from-pid",
        dest="from_pid",
        type="int",
        default=0,
        help="The PID number to copy from (default: %default)",
    )
    parser.add_option(
        "-t",
        "--to-pid",
        dest="to_pid",
        type="int",
        default=-1,
        help="The PID number to assign the copy (default: highest found + 1)",
    )
    parser.add_option(
        "-k",
        "--field",
        dest="field",
        default="name",
        help="Specify a JSON field to filter on (default: %default)",
    )
    parser.add_option(
        "-v",
        "--invert",
        dest="invert",
        action="store_true",
        help="Invert the match for the pattern (default: %default)",
    )
    return parser


def main(argv):
    parser = get_parser()
    (options, args) = parser.parse_args(argv)

    if len(args) == 1:
        trace = json.load(sys.stdin)
    elif len(args) == 2:
        with open(args[1], "r") as file:
            trace = json.load(file)
    else:
        parser.print_help()
        print("\nERROR: no pattern given, or too many arguments\n")
        return 1

    to_pid = options.to_pid
    if to_pid == -1:
        to_pid = find_highest_pid(trace) + 1

    output = dup_json(
        trace, options.field, args[0], options.from_pid, to_pid, options.invert
    )
    json.dump(output, sys.stdout)

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
